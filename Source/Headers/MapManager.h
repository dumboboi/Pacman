#pragma once
#include "SFML/Graphics.hpp"
#include "vector"

class MapManager
{



public:
	MapManager();

	void update();
	void draw(sf::RenderWindow*	 window);
	void reset();
	
	//this is the Map represented in a vector of vectors of chars:
	// '#' represets a wall(blue wall), '.' represents a coin, ' ' represents a space. '*' represents a	 big coin.

	std::vector<std::vector<char>>Level 
	{ 
	{' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',},
	{' ','#','*','.','.','.','.','.','.','.','#','.','.','.','.','.','.','.','*','#',' ',},
	{' ','#','.','.','.','.','#','#','.','.','#','.','.','#','.','.','#','#','.','#',' ',},
	{' ','#','.','.','.',' ',' ',' ',' ',' ','.',' ',' ',' ',' ',' ','.','.','.','#',' ',},
	{' ','#','.','.','.',' ',' ',' ','#','#','#','#','#',' ',' ',' ','.','.','.','#',' ',},
	{' ','#','.','.','.','.','#','.','.','.','#','.','.','.','#','.','.','.','.','#',' ',},
	{' ','#','#','#','#','.','#','#',' ',' ','#',' ',' ','#','#','.','#','#','#','#',' ',},
	{' ',' ',' ',' ','#','.',' ',' ',' ',' ',' ',' ',' ',' ',' ','.','#',' ',' ',' ',' ',},
	{'#','#','#','#','.','.',' ',' ','#','#','#','#','#',' ',' ','.','.','#','#','#','#',},
	{'.','.','.','.',' ','.',' ',' ','#','.','.','.','#',' ',' ','.',' ','.','.','.','.',},
	{'#','#','#','#','#','.',' ',' ','#','#','#','#','#',' ',' ','.','#','#','#','#','#',},
	{' ',' ',' ',' ','#','.','#',' ',' ',' ',' ',' ',' ',' ','#','.','#',' ',' ',' ',' ',},
	{' ','#','#','#','#','.',' ',' ',' ','#','#','#',' ',' ',' ','.','#','#','#','#',' ',},
	{' ','#','.','.','.','.',' ',' ',' ',' ','#',' ',' ',' ',' ','.','.','.','.','#',' ',},
	{' ','#','.',' ',' ',' ','#','#','#',' ',' ',' ','#','#','#',' ',' ',' ','.','#',' ',},
	{' ','#','.','.','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','.','.','#',' ',},
	{' ','#','#','.',' ',' ',' ',' ',' ','#','#','#',' ',' ',' ',' ',' ','.','#','#',' ',},
	{' ','#','.','.',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ','.','.','#',' ',},	
	{' ','#','.','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','.','#',' ',},
	{' ','#','*','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','*','#',' ',},
	{' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',}
};
	//this returns a pointer that points to the map
	std::vector<std::vector<char>>* getMap() { return &tempMap; }


	//variables
public:
	std::vector<std::vector<char>>tempMap;
private:
	sf::Texture bgTexture;
	sf::Sprite bgSprite;
	sf::Texture cellTexture;
	sf::Sprite cellSprite;
	sf::Texture coinTexture;
	sf::Sprite coinSprite;
	sf::Texture BIGcoinTexture;
	sf::Sprite BIGcoinSprite;
	unsigned short MAP_RESIZE;
	bool MAP_UPDATED;


};


